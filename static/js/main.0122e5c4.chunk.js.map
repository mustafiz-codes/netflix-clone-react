{"version":3,"sources":["axios.js","Row.js","Nav.js","requests.js","Banner.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","src","poster_path","backdrop_path","alt","name","Nav","show","handleShow","window","addEventListener","scrollY","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAOeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,MCwCEC,MArCf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAAc,EAChBC,mBAAS,IADO,mBACrCC,EADqC,KAC7BC,EAD6B,KAe5C,OAZAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBX,EAAMY,IAAIP,GADlC,cACQQ,EADR,OAGEJ,EAAUI,EAAQC,KAAKC,SAHzB,kBAISF,GAJT,4CADc,uBAAC,WAAD,wBAOdG,KACC,CAACX,IAKF,yBAAKY,UAAU,OACb,4BAAKb,GAEL,yBAAKa,UAAU,eAGZT,EAAOU,KAAI,SAACC,GAAD,OACV,yBACEC,IAAKD,EAAME,GACXJ,UAAS,qBAAgBX,GAAc,mBACvCgB,IAAG,UA5BE,wCA4BF,OACDhB,EAAaa,EAAMI,YAAcJ,EAAMK,eAEzCC,IAAKN,EAAMO,a,MCHRC,MA9Bf,WAAgB,IAAD,EACcpB,oBAAS,GADvB,mBACNqB,EADM,KACAC,EADA,KAeb,OAZAnB,qBAAU,WAOR,OANAoB,OAAOC,iBAAiB,UAAU,WAC5BD,OAAOE,QAAU,IACnBH,GAAW,GAERA,GAAW,MAEX,WACLC,OAAOC,iBAAiB,aAEzB,IAGD,yBAAKd,UAAS,cAASW,GAAQ,cAC7B,yBACEX,UAAU,WACVK,IAAI,yJACJG,IAAI,iBAGN,yBAAKR,UAAU,eACb,4BAAQA,UAAU,cAAlB,cC3BFgB,G,MAAU,oCAaDC,EAXE,CACfC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,qBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oBC+CLU,MApDf,WAAmB,IAgBCC,EAAKC,EAhBP,EACUtC,mBAAS,IADnB,mBACTY,EADS,KACF2B,EADE,KAoBhB,OAjBApC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBX,EAAMY,IAAIsB,EAASE,uBAD3C,cACQvB,EADR,OAEEiC,EACEjC,EAAQC,KAAKC,QACbgC,KAAKC,MAAMD,KAAKE,SAAWpC,EAAQC,KAAKC,QAAQmC,OAAS,KAJ7D,kBAOShB,GAPT,4CADc,uBAAC,WAAD,wBAUdlB,KACC,IAOD,4BAAQC,UAAU,SAChBkC,MAAO,CACLC,eAAgB,QAChBC,gBAAgB,wDAAD,cAC0BlC,QAD1B,IAC0BA,OAD1B,EAC0BA,EAAOK,cADjC,gBAGf8B,mBAAoB,kBAGtB,yBAAKrC,UAAU,mBAEb,wBAAIA,UAAU,iBACN,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOf,SAAP,OAAgBe,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOO,QAAvB,OAA+BP,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOoC,gBAGzC,yBAAKtC,UAAU,kBACb,4BAAQA,UAAU,iBAAlB,QACA,4BAAQA,UAAU,iBAAlB,YAGF,wBAAIA,UAAU,uBAzBF2B,EA0BD,OAACzB,QAAD,IAACA,OAAD,EAACA,EAAOqC,SA1BFX,EA0BY,KAzBvB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAID,EAAIa,OAAO,EAAGZ,EAAI,GAAK,MAAQD,KA8BtD,yBAAK3B,UAAU,wBCtBNyC,MArBf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEb,MAAM,oBACNC,SAAU6B,EAASE,sBACnB9B,YAAU,IAEZ,kBAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU6B,EAASC,gBAC7C,kBAAC,EAAD,CAAK/B,MAAM,YAAYC,SAAU6B,EAASG,gBAC1C,kBAAC,EAAD,CAAKjC,MAAM,gBAAgBC,SAAU6B,EAASI,oBAC9C,kBAAC,EAAD,CAAKlC,MAAM,gBAAgBC,SAAU6B,EAASM,oBAC9C,kBAAC,EAAD,CAAKpC,MAAM,gBAAgBC,SAAU6B,EAASK,oBAC9C,kBAAC,EAAD,CAAKnC,MAAM,kBAAkBC,SAAU6B,EAASO,qBAChD,kBAAC,EAAD,CAAKrC,MAAM,qBAAqBC,SAAU6B,EAASQ,uBCbrCiB,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0122e5c4.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// base url to make requests to the movie database\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\n// import requests from './requests';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      // console.log(request.data.results);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  //   console.log(movies);\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row_posters\">\n        {/* several row posters */}\n\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      }\n      else handleShow(false);\n    })\n    return () => {\n      window.addEventListener(\"scroll\");\n    }\n  }, [])\n\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.tmf-group.com%2F-%2Fmedia%2Fimages%2Flogos%2Fcase-study-logos%2Fnetflix.png&f=1&nofb=1\"\n        alt=\"Netflix Logo\"\n      />\n\n      <div className=\"nav_Buttons\">\n        <button className=\"nav_button\">Sign Up</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","const API_KEY = \"4a2653290ca14e61ee9fecb1271b719c\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-Us`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-Us`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Banner.css\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n        Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return requests;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n          \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}>\n\n      <div className=\"banner_contents\">\n\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List</button>\n        </div>\n\n        <h1 className=\"banner_description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n\n      </div>\n\n      <div className=\"banner-fadeBottom\"></div>\n    </header >\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\n// import logo from './logo.svg';\n\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport Nav from \"./Nav\";\nimport Banner from \"./Banner\";\nimport requests from \"./requests\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Romantic Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentary Movies\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}